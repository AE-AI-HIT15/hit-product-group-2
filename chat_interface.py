import streamlit as st
import requests
import logging
import time
from uuid import uuid4

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

API_BASE_URL = "http://127.0.0.1:8002"

def send_chat_request(user_message, user_id, bot_id, stream=False):
    url = f"{API_BASE_URL}/api/chat"
    payload = {
        "user_message": user_message,
        "user_id": user_id,
        "bot_id": bot_id,
        "stream": stream
    }
    headers = {'Content-Type': 'application/json'}
    try:
        response = requests.post(url, headers=headers, json=payload, timeout=30)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        logger.error(f"API error: {e}")
        return {"content": f"‚ùå L·ªói: {str(e)}"}

def check_health():
    try:
        response = requests.get(f"{API_BASE_URL}/api/health", timeout=5)
        response.raise_for_status()
        return response.json()
    except:
        return {"status": "unhealthy"}

def response_generator(user_message, user_id, bot_id):
    resp = send_chat_request(user_message, user_id, bot_id, stream=False)
    content = resp.get("content", "")
    for word in content.split():
        yield word + " "
        time.sleep(0.03)
        
def reset_server_memory(user_id):
    try:
        r = requests.post(f"{API_BASE_URL}/api/memory/reset",
                          json={"user_id": user_id}, timeout=5)
        r.raise_for_status()
        return True
    except Exception as e:
        logger.error(f"Reset memory error: {e}")
        return False

# --- UI ---
st.set_page_config(page_title="Vietnamese Law Chatbot", page_icon="‚öñÔ∏è", layout="wide")
st.title("‚öñÔ∏è Vietnamese Law Chatbot")
st.markdown("*Tr·ª£ l√Ω AI cho c√°c c√¢u h·ªèi ph√°p lu·∫≠t Vi·ªát Nam*")

# Sidebar
with st.sidebar:
    st.header("‚öôÔ∏è C·∫•u h√¨nh")
    health = check_health()
    if health.get("status") == "healthy":
        st.success("‚úÖ Server ƒëang ho·∫°t ƒë·ªông")
        st.info(f"Model: {health.get('model', '')}")
    else:
        st.error("‚ùå Server kh√¥ng ho·∫°t ƒë·ªông")

    enable_streaming = st.checkbox("B·∫≠t hi·ªáu ·ª©ng streaming", value=False)

    if st.button("üóëÔ∏è X√≥a l·ªãch s·ª≠ tr√≤ chuy·ªán"):
        
        reset_server_memory(st.session_state.user_id) 
        st.session_state.user_id = str(uuid4())
        
        st.session_state.messages = []
        st.rerun()

# Kh·ªüi t·∫°o user_id v√† bot_id m·∫∑c ƒë·ªãnh (·∫©n kh·ªèi giao di·ªán)
if "user_id" not in st.session_state:
    st.session_state.user_id = str(uuid4())
bot_id = "vietnamese_law_bot"

# Kh·ªüi t·∫°o l·ªãch s·ª≠ chat
if "messages" not in st.session_state:
    st.session_state.messages = []

# Hi·ªÉn th·ªã l·ªãch s·ª≠ chat
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# Nh·∫≠p c√¢u h·ªèi
if prompt := st.chat_input("Nh·∫≠p c√¢u h·ªèi ph√°p lu·∫≠t c·ªßa b·∫°n..."):
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)
    with st.chat_message("assistant"):
        if enable_streaming:
            response = st.write_stream(response_generator(prompt, st.session_state.user_id, bot_id))
        else:
            with st.spinner("ƒêang x·ª≠ l√Ω..."):
                resp = send_chat_request(prompt, st.session_state.user_id, bot_id)
                response = resp.get("content", "Kh√¥ng c√≥ ph·∫£n h·ªìi t·ª´ bot.")
            st.markdown(response)
    st.session_state.messages.append({"role": "assistant", "content": response})

# Footer
st.markdown("---")
st.markdown(
    """
    <div style='text-align: center; color: gray;'>
        <small>Vietnamese Law Chatbot - Powered by AI</small>
    </div>
    """, unsafe_allow_html=True
)